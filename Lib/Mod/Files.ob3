MODULE [noinit] Files;	(** portable layer for LibC - file IO *)
(*******************************************************************************
*      Description: provides a simple buffered file input/output library.      *
********************************************************************************

  По замыслу при работе с файлами есть 3 уровня различной глубины:

  1. Все ошибки могут игнорироваться; ничего страшного не произойдёт,
     кроме того, что файл может не создаться и т.п. Можно проверять на
     ошибки состояние File.error один раз после всех файловых операций.
  2. Проверяем File.error после каждой файловой операции; так у нас
     есть точная указка где именно произошла (или не произошла) ошибка.
  3. Если недостаточно информации о возникшей ошибке, мы уточняем её,
     опросив переменную File.state и сравнив значение с кодом состояния.
*)

IMPORT SYSTEM, Platform, Ignore;

TYPE
  PtrFILE = Platform.FileHandle;
  STRING = ARRAY OF CHAR;

  File* = RECORD [notag] (** Binary file *)
    handle: PtrFILE;
    end-: BOOLEAN; (** is end of file? *)
    error-: BOOLEAN; (** is no file errors? *)
    prevbyte: SYSTEM.BYTE; (* used as byte cache for correct work of EOF. *)
  END;
  FileToRead* = RECORD [notag] (File) (** Binary file to read only. *)
  END;
  FileToWrite* = RECORD [notag] (File) (** Binary file to write only. *)
  END;

(*
   Checks whether the end-of-File indicator associated with stream is set, returning a value different from zero if it is.
   This indicator is generally set by a previous operation on the stream that attempted to read at or past the end-of-file.
   Notice that stream's internal position indicator may point to the end-of-file for the next operation, but still, the end-of-file indicator may not be set until an operation attempts to read at that point.

http://www.cplusplus.com/reference/clibrary/cstdio/feof/
*)

(*
   Close - close a file which has been previously opened using:
           OpenToRead, OpenToWrite, OpenForRandom.
           It is correct to close a file which has an error status.
*)
PROCEDURE (VAR file: File) Close* ;
BEGIN
  IF file.handle # -1 THEN (* This is file to close. *)
    file.error := Platform.CloseFile(file.handle) # 0;
    file.handle := -1; (* file.state := Successful; *)
  END;
END Close;

PROCEDURE (VAR fromfile: FileToRead) ReadByte* (): SYSTEM.BYTE;
VAR
  byte: SYSTEM.BYTE; read: INTEGER;
BEGIN
  byte := fromfile.prevbyte;
  IF ~fromfile.end & ~fromfile.error THEN
    fromfile.error := 0 # Platform.Read(fromfile.handle, SYSTEM.ADR(fromfile.prevbyte), 1, @read);
    fromfile.end := 0 = read;
  END;
  RETURN byte
END ReadByte;

(*
   OpenToRead - attempts to open a file, fname, for reading and
                it returns this file.
                The success of this operation can be checked by
                calling file.error.
*)

(*@#define file__typ 0*)

PROCEDURE (VAR file: File) OpenToRead* (fname: STRING);
BEGIN
  file.error := 0 # Platform.OldRO(fname, @file.handle);
  file.end := file.error;
  Ignore.Int( file(:FileToRead).ReadByte() );
END OpenToRead;

(*
   OpenToWrite - attempts to open a file, fname, for write and
                 it returns this file.
                 The success of this operation can be checked by
                 calling file.error.
*)
PROCEDURE (VAR file: File) OpenToWrite* (fname: STRING);
BEGIN
  file.error := 0 # Platform.NewFile(fname, @file.handle);
END OpenToWrite;

PROCEDURE (VAR tofile: FileToWrite) WriteByte* (byte: SYSTEM.BYTE);
BEGIN
  IF tofile.error THEN RETURN END; (* To safe work after error. *)
  tofile.error := 0 # Platform.Write(tofile.handle, SYSTEM.ADR(byte), 1);
END WriteByte;

END Files.
